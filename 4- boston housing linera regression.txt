# Importing required libraries 
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error, r2_score 
 
# Load the dataset from a CSV file 
file_path = 'D:/HousingData.csv'  # Replace with the actual path to your CSV file 
housing_data = pd.read_csv("D:/HousingData.csv") 
 
# Display basic information about the dataset 
print(housing_data.info()) 
print(housing_data.describe()) 
 
# Check for missing values 
print("Missing values in each column:\n", housing_data.isnull().sum()) 
 
# Handle missing values (if any) 
housing_data = housing_data.dropna()  # Drop rows with missing values 
 
# Outlier detection using IQR method 
Q1 = housing_data.quantile(0.25) 
Q3 = housing_data.quantile(0.75) 
IQR = Q3 - Q1 
housing_data = housing_data[~((housing_data < (Q1 - 1.5 * IQR)) | (housing_data > (Q3 + 
1.5 * IQR))).any(axis=1)] 
 
# Separate features and target 
X = housing_data.drop(columns=['MEDV'])  # Replace 'MEDV' with the actual column 
y = housing_data['MEDV']  # Replace 'MEDV' with the actual column name for the target 
 
# Split the dataset into training and testing sets 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
 
# Initialize and train the Linear Regression model 
model = LinearRegression() 
model.fit(X_train, y_train) 
 
# Make predictions on the test set 
y_pred = model.predict(X_test) 
 
# Evaluate the model 
mse = mean_squared_error(y_test, y_pred) 
r2 = r2_score(y_test, y_pred) 
print("Mean Squared Error:", mse) 
print("R-squared Score:", r2) 
 
# Add predictions to the test set data for saving 
test_results = X_test.copy() 
test_results['Actual_MEDV'] = y_test 
test_results['Predicted_MEDV'] = y_pred 
 
# Save the test results to a new CSV file 
output_file_path = 'D:/boston_predictions.csv'  # Replace with your desired output file name 
test_results.to_csv(output_file_path, index=False) 
print(f"Predictions saved to {output_file_path}") 
 
# Visualization: Actual vs Predicted prices 
plt.figure(figsize=(10, 6)) 
plt.scatter(y_test, y_pred, alpha=0.7, color='blue') 
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', 
linewidth=2) 
plt.xlabel('Actual Prices') 
plt.ylabel('Predicted Prices') 
plt.title('Actual vs Predicted Prices') 
plt.show() 